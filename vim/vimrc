" -------------------------
" .vimrc - @renatoagomes 
" - [dotfiles](http://github.com/renatoagomes/dotfiles)
" -------------------------

" LEADER KEY
let mapleader=","

" === Facilitando alterar configurações comuns (dotfiles, i3, zsh, vim, snippets)
nmap <leader>dot :e ~/dotfiles/README.md<cr>            
nmap <leader>i3 :e ~/dotfiles/i3/config<cr>
nmap <leader>zsh :e ~/dotfiles/zsh/zshrc<cr>
nmap <leader>ev :e ~/dotfiles/vim/vimrc<cr>
nmap <leader>es :e ~/dotfiles/vim/UltiSnips/

"Git vim Fugitive
nmap <leader>gst :Gstatus<CR>
nmap <leader>gad :Gwrite<CR>
nmap <leader>gcom :Gcommit<CR>

nmap <leader><leader> :terminal<cr>

call plug#begin()

Plug 'vimwiki/vimwiki'
Plug 'suan/vim-instant-markdown'
Plug 'tobyS/vmustache'
Plug 'tobyS/pdv'
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}
Plug 'Raimondi/delimitMate'
Plug 'junegunn/vim-easy-align'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mattn/emmet-vim'
Plug 'scrooloose/nerdtree'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'jwalton512/vim-blade'
Plug 'ryanoasis/vim-devicons'
Plug 'tpope/vim-fugitive'
Plug 'editorconfig/editorconfig-vim'
Plug 'airblade/vim-gitgutter'
Plug 'vim-syntastic/syntastic'
Plug 'terryma/vim-multiple-cursors'
Plug 'stephpy/vim-php-cs-fixer'
Plug 'arnaud-lb/vim-php-namespace'

call plug#end()
    
" === Plugins pathogen ftw o/ (Testando vim-plug)
"runtime bundle/vim-pathogen/autoload/pathogen.vim
"call pathogen#infect()

syntax on
filetype plugin on

set nocompatible                                        " - Sem vi
set autoread                                            " - Auto-recarregar arquivos se modificados externamente

"encoding utf 8 pfv
set encoding=utf8
set fileencoding=utf8

"Folding
set foldlevelstart=1


" by default, in insert mode backspace won't delete over line breaks, or.
" automatically-inserted indentation, let's change that
set backspace=indent,eol,start

" dont't unload buffers when they are abandoned, instead stay in the background
set hidden

" CTRLC / CTRLV Like a windows
let &clipboard = has('unnamedplus') ? 'unnamedplus' : 'unnamed'
vm <c-x> "+x
vm <c-c> "+y
cno <c-v> <c-r>+
exe 'ino <script> <C-V>' paste#paste_cmd['i']

" SWAP FILES NEVER AGAIN!! vlw @ltgouvea :+1:
set dir=$HOME/.vim_tmp/swap
if !isdirectory(&dir) | call mkdir(&dir, 'p', 0700) | endif


" -------------------------
" === VISUAL
" -------------------------
set t_Co=256
colorscheme atom-dark-256                                       "(https://github.com/gosukiwi/vim-atom-dark)
"colorscheme SerialExperimentsLain                           




"trocando guifont ( :set guifont=* ) depois de escolher repeat s/ o '*'
"set guifont=FuraMonoForPowerline\ Nerd\ Font\ Medium\ 12
set guifont=FuraMono\ Nerd\ Font\ Medium\ 12

"mostrando numero da linha á esquerda
set relativenumber

"Espaco dos numeros das linhas á esquerda
set numberwidth=2

"aumentando espacamento entre as linhas
set linespace=9

"se estiver executando com GUI (gvim), remover a barra superior/scrolls 
if has("gui_running")
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R
    set guioptions-=T
    set guioptions-=e
    set guioptions-=m
end

" Settando cor dos LineNumbers e do split vertical
hi LineNr guibg=bg
hi vertsplit guifg=bg

" -------------------------
" === IDENTAÇÃO
" -------------------------

set expandtab       " use spaces instead of tabs
set autoindent      " autoindent based on line above, works most of the time
set smartindent     " smarter indent for C-like languages
set shiftwidth=4    " when reading, tabs are 4 spaces
set softtabstop=4   " in insert mode, tabs are 4 spaces

"vim 7.4 the html tags html, head, body, and some others are not indented by default
let g:html_indent_inctags = "html,body,head,tbody"

"Mapeando a troca de filetype para facilitar problemad com identacao de blade & html
map <leader>cft :set ft=

"seed file (para recarregar as confs do vim sem ter que dar restart)
map <leader>s :source ~/.vimrc<CR>

"Fechando buffer atual com Ctrl q
nmap <C-q> :bdelete<CR>


"Trocando de buffers prev / next com <leader> q||w
noremap <leader>q :bp<CR>
noremap <leader>w :bn<CR>
noremap <F2> :bp<CR>
noremap <F3> :bn<CR>

"Salvando arquivo com Ctrl s (bindando visual e insert mode tambem)
nmap <C-s> :w<CR>
vmap <C-s> <esc>:w<CR>gv
imap <C-s> <esc>:w<CR>a

"Split Management (trocar entre splits com ctrl HJKL)
nmap <C-J> <C-W><C-J>
nmap <C-H> <C-W><C-H>
nmap <C-K> <C-W><C-K>
nmap <C-L> <C-W><C-L>

" Carregando linha com CTRL + J ou K
nnoremap <C-J> :m .+1<CR>==
nnoremap <C-K> :m .-2<CR>==
inoremap <C-J> <Esc>:m .+1<CR>==gi
inoremap <C-K> <Esc>:m .-2<CR>==gi
vnoremap <C-J> :m '>+1<CR>gv=gv
vnoremap <C-K> :m '<-2<CR>gv=gv


nmap ga <Plug>(EasyAlign)
nnoremap + <C-a>
nnoremap - <C-x>
nnoremap -a :exec ToggleAim()<CR>
nnoremap -f :exec ToggleFolding()<CR>
nnoremap -n :exec ToggleNumbers()<CR>


"Resize VSP
nmap <leader>b :vertical resize +10<cr>
nmap <leader>v :vertical resize -10<cr>

" -------------------------
" === NERDTree especificos
" -------------------------

"sim, mostrar arquivos ocultos também
let NERDTreeShowHidden=1

nmap <leader>n :NERDTreeToggle<CR>

"Encontra o file na NerdTree e centraliza verticalmente
nmap <leader>nf :NERDTreeFind<CR>zz

"Ignore algumas coisas
let NERDTreeIgnore=['\.git', '\~$', '\.swp']

"removendo espaco extra apos icone do filetype na nerdtree
let g:WebDevIconsNerdTreeAfterGlyphPadding = ''

set conceallevel=0

" after a re-source, fix syntax matching issues (concealing brackets):
if exists('g:loaded_webdevicons')
    call webdevicons#refresh()
endif

let NERDTreeHighlightCursorline = 0


" -------------------------
" SEARCH (https://github.com/Roshanjossey/dot-files/blob/master/.vimrc#L126):
" -------------------------

set ignorecase " case insensitive search
set smartcase " If there are uppercase letters, become case-sensitive.
set incsearch " live incremental searching
set showmatch " live match highlighting
set hlsearch " highlight matches
set gdefault " use the `g` flag by default.
set smartcase "CtrlP case sensitive se houver :D

"Limpando highlights
nnoremap <leader><space> :noh<return><esc>                           


" -------------------------
" === CtrlP especificos
" -------------------------

"Diretorios que serao ignorados pelo CtrlP (performace)
set wildignore+=*/vendor/*,*/public/*,*/node_modules/*,*.swp,*.zip

"Buscar por metodos com <leader> R
nmap <leader>r :CtrlPBufTag<cr>

"Arrumando sugestoes do CtrlP
let g:ctrlp_match_window = 'top,order,ttb,min:1,max:20,results:20'

" -------------------------
" === Airline especificos
" -------------------------

let g:airline_powerline_fonts = 1 	"autorizando powerlinefonts
let g:airline#extensions#tabline#enabled = 1 "Criando lista de buffers no topo

" Mostrar só o nome do arquivo
let g:airline#extensions#tabline#fnamemod = ':t'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_theme='powerlineish'

" -------------------------
" === Ultisnips especificos
" -------------------------
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" -------------------------
" === Emmet especificos
" -------------------------
let g:user_emmet_mode='i'  " Emmet vai funcionar em insert mode (opcoes: 'niv')

"Remapeando Insert MODE CTRLE para dar CTRLY, (trigger padrao do emmet)
imap <C-e> <C-y>,




" -------------------------
" === Syntastic especificos (https://github.com/vim-syntastic/syntastic)
" -------------------------

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1

"Desativndo sintax checker para rodar somente quando precisar
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['php'],'passive_filetypes': [] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>

" Especificando os checkers que rodaram em arquivos .php (é necessario ter os checkers instalados)
let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd', 'phplint']

"" === PHP CS Fixer por file e por diretorio
nnoremap <silent><leader>fx :call PhpCsFixerFixFile()<CR>
nnoremap <silent><leader>fX :call PhpCsFixerFixDirectory()<CR>


"" === PDV (https://github.com/tobyS/pdv)
let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
nnoremap <leader>doc :call pdv#DocumentCurrentLine()<CR>v/\*\/<cr>:s/${.*://<cr>V?\*\*<cr>:s/} */ /<cr>V?\*\*<cr>:s/${.* //<cr>


"" === indent-guides https://github.com/nathanaelkane/vim-indent-guides
"let g:ident_guides_start_level = 2
"let g:ident_guides_guide_size = 1


" -------------------------
" === vim-php-namespace (https://github.com/arnaud-lb/vim-php-namespace)
" -------------------------

"Apos inserir sort por tamanho
let g:php_namespace_sort = "'{,'}-1!awk '{print length, $0}' | sort -n -s | cut -d' ' -f2-"
function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction

" Inserindo use statements das classes com <leader>use
autocmd FileType php inoremap <Leader>use <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>use :call PhpInsertUse()<CR>

function! IPhpExpandClass()
    call PhpExpandClass()
    call feedkeys('a', 'n')
endfunction

" Expandindo class name com <leader>exp
autocmd FileType php inoremap <Leader>exp <Esc>:call IPhpExpandClass()<CR>
autocmd FileType php noremap <Leader>exp :call PhpExpandClass()<CR>

" Arrumando use statements por tamanho com <leader>sr
autocmd FileType php inoremap <Leader>sr <Esc>:call PhpSortUse()<CR>
autocmd FileType php noremap <Leader>sr :call PhpSortUse()<CR>

" Sort automatico apos insercao
let g:php_namespace_sort_after_insert = 1


nmap <S-TAB> :bprevious<cr>
nmap <TAB> :bNext<cr>

nmap ga <Plug>(EasyAlign)
nnoremap + <C-a>
nnoremap - <C-x>
nnoremap -g :GitGutterToggle<CR>
nnoremap -a :exec ToggleAim()<CR>
nnoremap -f :exec ToggleFolding()<CR>
nnoremap -n :exec ToggleNumbers()<CR>


function! ToggleAim()
    :set cursorcolumn! cursorline!
endfunction

function! ToggleNumbers()
    :set nu! relativenumber!
endfunction

function! ToggleFolding()
    :if &foldcolumn ==# 0 | set foldcolumn=1 foldmethod=indent | else | set foldcolumn=0 foldmethod=manual | endif
endfunction






" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()



" --- VIMWIKI - Listas listas listas..

let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]
let g:instant_markdown_autostart = 0

nmap <leader>td :e ~/vimwiki/TODO_DIARIO.md<CR>









" -------------------------
" Laravel Mappings
" -------------------------

" .env do projeto atual
nmap <leader>lev :e .env<cr>
nmap <leader>lesp :e app/Providers/EventServiceProvider.php<cr>
nmap <leader>lrw :e routes/web.php<cr>
nmap <leader>lra :e routes/api.php<cr>



