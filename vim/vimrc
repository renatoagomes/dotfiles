" -------------------------
"
" VIM FTW o/
"
" - @renatoagomes 
" - [vimrc](https://github.com/renatoagomes/dotfiles/blob/master/vim/vimrc)
"
" -------------------------

let mapleader=","
let localmapleader = "\<Space>"

" sessions workflow (<F4> when finishing, <F5> when restarting)
let g:session_dir = '~/dotfiles/vim/vim-sessions'
exec 'nnoremap <F4> :mks! ' . g:session_dir . '/'
exec 'nnoremap <F5> :so ' . g:session_dir . '/'

" mouse support _[ò|ó]_?
set mouse=a

" Plugins plugins 
call plug#begin()
  " Plug 'vim-autoformat/vim-autoformat'
  
  Plug 'mhinz/vim-startify'
  Plug 'vimwiki/vimwiki'
  Plug 'tobyS/vmustache'
  Plug 'tobyS/pdv'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'Raimondi/delimitMate'
  Plug 'mattn/emmet-vim'

  Plug 'preservim/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'

  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'

  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'

  Plug 'jwalton512/vim-blade'
  Plug 'ryanoasis/vim-devicons'
  Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

  Plug 'zivyangll/git-blame.vim'

  Plug 'tpope/vim-fugitive'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'airblade/vim-gitgutter'
  Plug 'vim-syntastic/syntastic'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'stephpy/vim-php-cs-fixer'
  Plug 'arnaud-lb/vim-php-namespace'
  Plug 'isruslan/vim-es6'
  Plug 'tpope/vim-commentary'
  Plug 'moll/vim-node'
  "Plug 'epilande/vim-react-snippets'
  "Plug 'maxmellon/vim-jsx-pretty'
  
  " Plug 'mxw/vim-jsx'
  " Plug 'maxmellon/vim-jsx-pretty'
  Plug 'pangloss/vim-javascript'

  Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'posva/vim-vue'
  Plug 'adoy/vim-php-refactoring-toolbox'
  Plug 'voldikss/vim-floaterm'
  Plug 'mtdl9/vim-log-highlighting'

  "Plug 'arcticicestudio/nord-vim'
  "Plug 'srcery-colors/srcery-vim' 
  
  Plug 'w0ng/vim-hybrid' 
  Plug 'francoiscabrol/ranger.vim'
  Plug 'rbgrouleff/bclose.vim'
  " Plug 'github/copilot.vim'
  " Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on upd:te
  Plug 'preservim/tagbar'

  Plug 'gelguy/wilder.nvim'
  Plug 'akinsho/toggleterm.nvim'

call plug#end()

call wilder#setup({'modes': [':', '/', '?']})


syntax on
filetype plugin indent on

set nocompatible                                        
set autoread                                            

"encoding utf 8 pfv
set encoding=utf8
set fileencoding=utf8

"Folding
set foldlevelstart=1
map <leader>cff :set foldmethod=

" by default, in insert mode backspace won't delete over line breaks, or.
" automatically-inserted indentation, let's change that
set backspace=indent,eol,start

" dont't unload buffers when they are abandoned, instead stay in the background
set hidden

" CTRLC / CTRLV Like a windows
let &clipboard = has('unnamedplus') ? 'unnamedplus' : 'unnamed'
vm <c-x> "+x
vm <c-c> "+y
cno <c-v> <c-r>+
exe 'ino <script> <C-V>' paste#paste_cmd['i']

" SWAP FILES NEVER AGAIN!! vlw @ltgouvea :+1:
set dir=$HOME/.vim_tmp/swap
if !isdirectory(&dir) | call mkdir(&dir, 'p', 0700) | endif


" -------------------------
" === VISUAL
" -------------------------
"set t_Co=256
"colorscheme atom-dark-256                                       "(https://github.com/gosukiwi/vim-atom-dark)
"colorscheme srcery                                               "(https://github.com/gosukiwi/vim-atom-dark)

"set background=dark
colorscheme hybrid

"trocando guifont ( :set guifont=* ) depois de escolher repeat s/ o '*'
"set guifont=FuraMonoForPowerline\ Nerd\ Font\ Medium\ 12
set guifont=FuraMono\ Nerd\ Font\ Medium\ 12

set relativenumber
"mostrando numero da linha á esquerda
set nu

"Espaco dos numeros das linhas á esquerda
set numberwidth=2

"aumentando espacamento entre as linhas
"set linespace=0

"se estiver executando com GUI (gvim), remover a barra superior/scrolls 
if has("gui_running")
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R
    set guioptions-=T
    set guioptions-=e
    set guioptions-=m
end

" Settando cor dos LineNumbers e do split vertical
hi LineNr guibg=bg
hi vertsplit guifg=bg

hi Folded ctermfg=DarkGrey
hi Folded ctermbg=bg

hi CocUnusedHighlight ctermbg=bg
hi CocUnusedHighlight ctermfg=LightGray

let g:terminal_color_4 = '#ff0000'
let g:terminal_color_5 = 'green'



" -------------------------
" === IDENTAÇÃO
" -------------------------

set expandtab       " use spaces instead of tabs
set autoindent      " autoindent based on line above, works most of the time
set smartindent     " smarter indent for C-like languages

autocmd FileType python setlocal shiftwidth=2 softtabstop=2 
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType css setlocal shiftwidth=2 tabstop=2
autocmd FileType scss setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType vue setlocal shiftwidth=2 tabstop=2
autocmd FileType php setlocal shiftwidth=4 tabstop=4
autocmd FileType markdown setlocal shiftwidth=2 tabstop=2

"vim 7.4 the html tags html, head, body, and some others are not indented by default
let g:html_indent_inctags = "html,body,head,tbody"

"Mapeando a troca de filetype para facilitar problemad com identacao de blade & html
map <leader>cft :set ft=

"seed file (para recarregar as confs do vim sem ter que dar restart)
map <leader>ss :source ~/.vimrc<CR>

"Fechando buffer atual com Ctrl q
nmap <C-q> :bdelete<CR>

"Trocando de buffers prev / next com <leader> q||w
noremap <leader>q :bp<CR>
noremap <leader>Q :bp<CR>
noremap <leader>w :bn<CR>
noremap <leader>W :bn<CR>
noremap <F2> :bp<CR>
noremap <F3> :bn<CR>

"Salvando arquivo com Ctrl s (bindando visual e insert mode tambem)
nmap <C-s> :w<CR>
vmap <C-s> <esc>:w<CR>gv
imap <C-s> <esc>:w<CR>a

"Split Management (trocar entre splits com ctrl HJKL)
nmap <C-J> <C-W><C-J>
nmap <C-H> <C-W><C-H>
nmap <C-K> <C-W><C-K>
nmap <C-L> <C-W><C-L>

" Carregando linha com CTRL + J ou K
" 
nnoremap <C-J> :m .+1<CR>==
nnoremap <C-K> :m .-2<CR>==
inoremap <C-J> <Esc>:m .+1<CR>==gi
inoremap <C-K> <Esc>:m .-2<CR>==gi
vnoremap <C-J> :m '>+1<CR>gv=gv
vnoremap <C-K> :m '<-2<CR>gv=gv


" nmap ga <Plug>(EasyAlign)
" nnoremap + <C-a>
" nnoremap - <C-x>
nnoremap -a :exec ToggleAim()<CR>
nnoremap -f :exec ToggleFolding()<CR>
nnoremap -n :exec ToggleNumbers()<CR>
nnoremap -- :exec ToggleAll()<CR>

"Resize VSP
nmap <leader>b :vertical resize +10<cr>
nmap <leader>v :vertical resize -10<cr>

" files i want a quick way to edit (dotfiles, i3, zsh, vim, snippets)
nmap <leader>dot :e ~/dotfiles/README.md<cr>            
nmap <leader>i3 :e ~/dotfiles/i3/config<cr>
nmap <leader>zsh :e ~/dotfiles/zsh/zshrc<cr>
nmap <leader>ev :e ~/dotfiles/vim/vimrc<cr>
nmap <leader>es :e ~/dotfiles/vim/UltiSnips/

" git mappings - 'vim-fugitive'
nmap <leader>gst :Git<CR>
nmap <leader>gm :Git mergetool<CR>
nmap <leader>gad :Gwrite<CR>
nmap <leader>gcm :Git commit<CR>
nmap <leader>gbl :Gblame<CR>
nmap <F11> :Git diff<CR>
nmap <F12> :Git blame<CR>

" terminal / floaterm mappings & settings
let g:floaterm_autoinsert = v:true
let g:floaterm_title = '$ $1/$2'

hi Floaterm guibg=black
hi FloatermBorder guibg=orange guifg=cyan

nmap <leader><leader> :FloatermToggle<cr>
nmap <leader>< :ToggleTerm<cr>
nmap <leader>> :FloatermNext<cr>
tnoremap <ESC><ESC> <C-\><C-n>

nnoremap   <silent>   <F6>    :FloatermNew<CR>
tnoremap   <silent>   <F6>    <C-\><C-n>:FloatermNew<CR>
nnoremap   <silent>   <F7>    :FloatermPrev<CR>
tnoremap   <silent>   <F7>    <C-\><C-n>:FloatermPrev<CR>
nnoremap   <silent>   <F8>    :FloatermNext<CR>
tnoremap   <silent>   <F8>    <C-\><C-n>:FloatermNext<CR>

" -------------------------
" === NERDTree especificos
" -------------------------

let NERDTreeShowHidden=1
let NERDTreeIgnore=['\.git', '\~$', '\.swp']

let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }

" Padding between icon and file/folder name
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '

nmap <leader>n :NERDTreeToggle<CR>
nmap <leader>nf :NERDTreeFind<CR>zz

" after a re-source, fix syntax matching issues (concealing brackets):
if exists('g:loaded_webdevicons')
    call webdevicons#refresh()
endif

let NERDTreeHighlightCursorline = 0


" -------------------------
" SEARCH (https://github.com/Roshanjossey/dot-files/blob/master/.vimrc#L126):
" -------------------------

set ignorecase " case insensitive search
set smartcase " If there are uppercase letters, become case-sensitive.
set incsearch " live incremental searching
set showmatch " live match highlighting
set hlsearch " highlight matches
set gdefault " use the `g` flag by default.

"Limpando highlights
nnoremap <leader><space> :noh<return><esc>                           

" wildmenu completion - https://stackoverflow.com/questions/9511253/how-to-effectively-use-vim-wildmenu
set wildmenu
set wildmode=longest:full,full
set wildignore+=*/vendor/*,*/node_modules/*,*.swp,*.zip
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*/public/*

let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn|public)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }

nmap <C-P> :Files<cr>
nmap <C-P> :Files<cr>
nmap <leader>p :Buffers<cr>
nmap <leader>P :Rg<cr>

"Reload no arquivo com ,r
nmap <leader>r :e!<cr>

"Arrumando sugestoes do CtrlP
let g:ctrlp_match_window = 'top,order,ttb,min:1,max:20,results:20'


" -------------------------
" === Airline especificos
" -------------------------
        let g:airline_powerline_fonts = 1 	"autorizando powerlinefonts
        let g:airline#extensions#tabline#enabled = 1 "Criando lista de buffers no topo

        " Mostrar só o nome do arquivo
        let g:airline#extensions#tabline#fnamemod = ':t'
        if !exists('g:airline_symbols')
          let g:airline_symbols = {}
        endif
        let g:airline_symbols.space = "\ua0"
        "let g:airline_theme='nord'
        let g:airline_theme='minimalist'

" -------------------------
" === Ultisnips especificos
" -------------------------
        " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
        let g:UltiSnipsExpandTrigger="<tab>"

        " If you want :UltiSnipsEdit to split your window.
        let g:UltiSnipsEditSplit="vertical"

" -------------------------
" === Emmet especificos
" -------------------------
        let g:user_emmet_mode='i'  " Emmet vai funcionar em insert mode (opcoes: 'niv')

        "Remapeando Insert MODE CTRLE para dar CTRLY, (trigger padrao do emmet)
        imap <C-e> <C-y>,


" -------------------------
" === Syntastic especificos (https://github.com/vim-syntastic/syntastic)
" -------------------------
        set statusline+=%#warningmsg#
        set statusline+=%{SyntasticStatuslineFlag()}
        set statusline+=%*

        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 1
        let g:syntastic_check_on_open = 1
        let g:syntastic_check_on_wq = 0
        let g:syntastic_javascript_checkers = ['eslint']
        let gsyntastic_javascript_eslint_exe = 'npx eslint %'


        "Desativndo sintax checker para rodar somente quando precisar
        let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['php'],'passive_filetypes': [] }
        nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>
        nnoremap <leader>sc  :SyntasticCheck<CR>

        " Especificando os checkers que rodaram em arquivos .php (é necessario ter os checkers instalados)
        let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd', 'phplint']

" -------------------------
" === Tagbar (https://github.com/preservim/tagbar)
" -------------------------
        nmap <leader>tb :TagbarToggle<CR>


" -------------------------
"" === PDV (https://github.com/tobyS/pdv)
" -------------------------
        let g:pdv_template_dir = $HOME . "/.vim/plugged/pdv/templates_snip"
        nnoremap <leader>doc :call pdv#DocumentCurrentLine()<CR>v/\*\/<cr>:s/${.*://<cr>V?\*\*<cr>:s/} */ /<cr>V?\*\*<cr>:s/${.* //<cr>

" -------------------------
" === vim-php-namespace (https://github.com/arnaud-lb/vim-php-namespace)
" -------------------------

        "Apos inserir sort por tamanho
        let g:php_namespace_sort = "'{,'}-1!awk '{print length, $0}' | sort -n -s | cut -d' ' -f2-"
        function! IPhpInsertUse()
            call PhpInsertUse()
            call feedkeys('a',  'n')
        endfunction

        function! IPhpExpandClass()
            call PhpExpandClass()
            call feedkeys('a', 'n')
        endfunction

        " Inserindo use statements das classes com <leader>use
        autocmd FileType php inoremap <Leader>use <Esc>:call IPhpInsertUse()<CR>
        autocmd FileType php noremap <Leader>use :call PhpInsertUse()<CR>

        " Expandindo class name com <leader>exp
        autocmd FileType php inoremap <Leader>exp <Esc>:call IPhpExpandClass()<CR>
        autocmd FileType php noremap <Leader>exp :call PhpExpandClass()<CR>

        " Arrumando use statements por tamanho com <leader>sr
        autocmd FileType php inoremap <Leader>sr <Esc>:call PhpSortUse()<CR>
        autocmd FileType php noremap <Leader>sr :call PhpSortUse()<CR>

" Sort automatico apos insercao
let g:php_namespace_sort_after_insert = 1

nmap <TAB> :b#<cr>

nmap ga <Plug>(EasyAlign)
nnoremap + <C-a>
nnoremap - <C-x>
nnoremap -g :GitGutterToggle<CR>
nnoremap -a :exec ToggleAim()<CR>
nnoremap -f :exec ToggleFolding()<CR>
nnoremap -n :exec ToggleNumbers()<CR>
nnoremap -l :exec ToggleLineAim()<CR>

function! ToggleLineAim()
    :set cursorline!
endfunction

function! ToggleAim()
    :set cursorcolumn! cursorline!
endfunction

function! ToggleNumbers()
    :set nu! relativenumber!
endfunction

function! ToggleFolding()
    :if &foldcolumn ==# 0 | set foldcolumn=1 foldmethod=indent | else | set foldcolumn=0 foldmethod=manual | endif
endfunction

function! ToggleAll()
    :call ToggleNumbers()
    :GitGutterBufferToggle
endfunction

" --- VIMWIKI - Listas listas listas..

" let wiki_1 = {}
" let wiki_1.path = '~/vimwiki/'

" let wiki_2 = {}
" let wiki_2.path = '~/vimwiki_scaffold/'

" let g:vimwiki_list = [wiki_1, wiki_2]

let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]
let g:instant_markdown_autostart = 0

nmap <leader>td :e ~/vimwiki/TODO_DIARIO.md<CR>
nmap <leader>tw :e ~/vimwiki/TODO_SEMANAL.md<CR>
nmap <leader>t :e ~/vimwiki/TODO_SEMANAL.md<CR>
nmap <F1> :VimwikiIndex<cr>

" " Prettier JS / JSX / SCSS / CSS / HTML
" au FileType javascript setlocal formatprg=prettier
" au FileType javascript.jsx setlocal formatprg=prettier
" au FileType typescript setlocal formatprg=prettier\ --parser\ typescript
" au FileType html setlocal formatprg=js-beautify\ --type\ html
" au FileType scss setlocal formatprg=prettier\ --parser\ css
" au FileType css setlocal formatprg=prettier\ --parser\ css


" -------------------------
" Laravel Mappings
" -------------------------

" .env do projeto atual
nmap <leader>lev :e .env<cr>
nmap <leader>lrw :e routes/web.php<cr>
nmap <leader>lra :e routes/api.php<cr>
nmap <leader>F :BTags<cr>


let g:EditorConfig_exclude_patterns = ['fugitive://.\*']

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

"" Float terminal configs
let g:floaterm_width=0.8
let g:floaterm_height=0.8

"" Disable coc warning
let g:coc_disable_startup_warning = 1

" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*,!docker/*,!storage/*,!vendor/*,!node_modules/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)


let g:fzf_layout = { 'window': { 'width': 0.95, 'height': 0.9 } }
let $FZF_DEFAULT_OPTS="--ansi --preview-window 'right:55%' --layout reverse --margin=1,4 --preview 'bat --color=always --style=header,grid --line-range :300 {}'"


let g:python3_host_prog="/usr/bin/python3"





" Make Arrowkey do something usefull, resize the viewports accordingly and
" it also forces us to use the default Vim movement keys HJKL
nnoremap <Left> :vertical resize +5<CR>
nnoremap <Right> :vertical resize -5<CR>
nnoremap <Up> :resize +5<CR>
nnoremap <Down> :resize -5<CR>


if executable('intelephense')
  augroup LspPHPIntelephense
    au!
    au User lsp_setup call lsp#register_server({
        \ 'name': 'intelephense',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'intelephense --stdio']},
        \ 'whitelist': ['php'],
        \ 'initialization_options': {'storagePath': '/tmp/intelephense'},
        \ 'workspace_config': {
        \   'intelephense': {
        \     'files': {
        \       'maxSize': 1000000,
        \       'associations': ['*.php', '*.phtml'],
        \       'exclude': [],
        \     },
        \     'completion': {
        \       'insertUseDeclaration': v:true,
        \       'fullyQualifyGlobalConstantsAndFunctions': v:false,
        \       'triggerParameterHints': v:true,
        \       'maxItems': 100,
        \     },
        \     'format': {
        \       'enable': v:true
        \     },
        \   },
        \ }
        \})
  augroup END
endif


nnoremap <C-l> :call CocActionAsync('jumpDefinition')<CR>

nnoremap <Leader>s :<C-u>call gitblame#echo()<CR>

" Copilot
"
let g:copilot_filetypes = {
 \ '*': v:false,
 \ 'php': v:true,
 \ 'javascript': v:true,
 \ 'vue': v:true,
 \ 'blade': v:true,
\ }
