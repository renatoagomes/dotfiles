" -------------------------
" .vimrc - @renatoagomes 
" - [dotfiles](http://github.com/renatoagomes/dotfiles)
" -------------------------

" LEADER KEY
let mapleader=","

" === Facilitando alterar configurações comuns (dotfiles, i3, zsh, vim, snippets)
nmap <leader>dot :e ~/dotfiles/README.md<cr>            
nmap <leader>i3 :e ~/dotfiles/i3/config<cr>
nmap <leader>zsh :e ~/dotfiles/.zshrc<cr>
nmap <leader>term :e ~/dotfiles/termite/config<cr>
nmap <leader>ev :e ~/dotfiles/vim/vimrc<cr>
nmap <leader>es :e ~/dotfiles/vim/UltiSnips/

" === Plugins pathogen ftw o/
runtime bundle/vim-pathogen/autoload/pathogen.vim
filetype off                                            " - fix pathogen em alguns sistemas (re-habilitando em seguida)
call pathogen#infect()
syntax on
filetype plugin indent on

set nocompatible                                        " - Sem vi
set autoread                                            " - Auto-recarregar arquivos se modificados externamente

"encoding utf 8 pfv
set encoding=utf8
set fileencoding=utf8

" by default, in insert mode backspace won't delete over line breaks, or.
" automatically-inserted indentation, let's change that
set backspace=indent,eol,start

" dont't unload buffers when they are abandoned, instead stay in the background
set hidden

" CTRLC / CTRLV Like a windows
let &clipboard = has('unnamedplus') ? 'unnamedplus' : 'unnamed'
vm <c-x> "+x
vm <c-c> "+y
cno <c-v> <c-r>+
exe 'ino <script> <C-V>' paste#paste_cmd['i']

" SWAP FILES NEVER AGAIN!! vlw @ltgouvea :+1:
set dir=$HOME/.vim_tmp/swap
if !isdirectory(&dir) | call mkdir(&dir, 'p', 0700) | endif

" -------------------------
" === VISUAL
" -------------------------
"colorscheme SerialExperimentsLain                           
colorscheme atom-dark                                       "(https://github.com/gosukiwi/vim-atom-dark)

"trocando guifont ( :set guifont=* ) depois de escolher repeat s/ o '*'
"set guifont=FuraMonoForPowerline\ Nerd\ Font\ Medium\ 12
set guifont=FuraMono\ Nerd\ Font\ Medium\ 12

"mostrando numero da linha á esquerda
set relativenumber

"Espaco dos numeros das linhas á esquerda
set numberwidth=2

"aumentando espacamento entre as linhas
set linespace=9

"se estiver executando com GUI (gvim), remover a barra superior/scrolls 
if has("gui_running")
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R
    set guioptions-=T
    set guioptions-=e
    set guioptions-=m
end

" Settando cor dos LineNumbers e do split vertical
hi LineNr guibg=bg
hi vertsplit guifg=bg

" -------------------------
" === IDENTAÇÃO
" -------------------------

set expandtab       " use spaces instead of tabs
set autoindent      " autoindent based on line above, works most of the time
set smartindent     " smarter indent for C-like languages
set shiftwidth=4    " when reading, tabs are 4 spaces
set softtabstop=4   " in insert mode, tabs are 4 spaces

"vim 7.4 the html tags html, head, body, and some others are not indented by default
let g:html_indent_inctags = "html,body,head,tbody"

"Mapeando a troca de filetype para facilitar problemas com identacao de blade & html
map <leader>cft :set ft=

"seed file (para recarregar as confs do vim sem ter que dar restart)
map <leader>s :source ~/.vimrc<CR>

"Fechando buffer atual com Ctrl q
nmap <C-q> :bdelete<CR>

"Tab se comportando como esperado no visual mode ( +/- identacao com shift)
vmap <Tab> >gv
vmap <S-Tab> <gv

"Tab em normalmode troca para o buffer anterior
nmap <Tab> :b#<CR>

"Trocando de buffers prev / next com <leader> q||w
noremap <leader>q :bp<CR>
noremap <leader>w :bn<CR>

"Salvando arquivo com Ctrl s (bindando visual e insert mode tambem)
nmap <C-s> :w<CR>
vmap <C-s> <esc>:w<CR>gv
imap <C-s> <esc>:w<CR>a

"Split Management (trocar entre splits com ctrl direcional)
nmap <C-J> <C-W><C-J>
nmap <C-H> <C-W><C-H>
nmap <C-K> <C-W><C-K>
nmap <C-L> <C-W><C-L>

"Binding Buffers com <leader>F<nº>
map <leader><F1> :bfirst<CR>
map <leader><F2> :bfirst<CR>:bnext<CR>
map <leader><F3> :bfirst<CR>:bnext<CR>:bnext<CR>
map <leader><F4> :bfirst<CR>:bnext<CR>:bnext<CR>:bnext<CR>
map <leader><F5> :bfirst<CR>:bnext<CR>:bnext<CR>:bnext<CR>:bnext<CR>
map <leader><F6> :bfirst<CR>:bnext<CR>:bnext<CR>:bnext<CR>:bnext<CR>:bnext<CR>

"Resize VSP
nmap <leader>b :vertical resize +10<cr>
nmap <leader>v :vertical resize -10<cr>

" -------------------------
" === NERDTree especificos
" -------------------------

"sim, mostrar arquivos ocultos também
let NERDTreeShowHidden=1

nmap <leader>n :NERDTreeToggle<CR>

"Find current file in NerdTree
nmap <leader>nf :NERDTreeFind<CR>

"Ignore algumas coisas
let NERDTreeIgnore=['\.git', '\~$', '\.swp']

" -------------------------
" SEARCH (https://github.com/Roshanjossey/dot-files/blob/master/.vimrc#L126):
" -------------------------

set ignorecase " case insensitive search
set smartcase " If there are uppercase letters, become case-sensitive.
set incsearch " live incremental searching
set showmatch " live match highlighting
set hlsearch " highlight matches
set gdefault " use the `g` flag by default.
set smartcase "CtrlP case sensitive se houver :D

"Limpando highlights
nnoremap <leader><space> :noh<return><esc>                           


" -------------------------
" === CtrlP especificos
" -------------------------

"Diretorios que serao ignorados pelo CtrlP (performace)
set wildignore+=*/vendor/*,*/public/*,*/node_modules/*,*.swp,*.zip

"Buscar por metodos com <leader> R
nmap <leader>r :CtrlPBufTag<cr>

"Arrumando sugestoes do CtrlP
let g:ctrlp_match_window = 'top,order,ttb,min:1,max:20,results:20'

" -------------------------
" === Airline especificos
" -------------------------

let g:airline_powerline_fonts = 1 	"autorizando powerlinefonts
let g:airline#extensions#tabline#enabled = 1 "Criando lista de buffers no topo

" Mostrar só o nome do arquivo
let g:airline#extensions#tabline#fnamemod = ':t'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_theme='powerlineish'

" -------------------------
" === Ultisnips especificos
" -------------------------
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" -------------------------
" === Emmet especificos
" -------------------------
let g:user_emmet_mode='i'  " Emmet vai funcionar em insert mode (opcoes: 'niv')

"Remapeando Insert MODE CTRLE para dar CTRLY, (trigger padrao do emmet)
imap <C-e> <C-y>,

" -------------------------
" === Syntastic especificos (https://github.com/vim-syntastic/syntastic)
" -------------------------

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1

"Desativndo sintax checker para rodar somente quando precisar
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['php'],'passive_filetypes': [] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>

" Especificando os checkers que rodaram em arquivos .php (acredito que seja necessario adiciona-los ao $PATH)
let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd', 'phplint']

" === PDV (https://github.com/tobyS/pdv)
let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
nnoremap <leader>doc :call pdv#DocumentCurrentLine()<CR>

" -------------------------
" === vim-php-namespace (https://github.com/arnaud-lb/vim-php-namespace)
" -------------------------
function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction

" Inserindo use statements das classes com <leader>use
autocmd FileType php inoremap <Leader>use <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>use :call PhpInsertUse()<CR>

function! IPhpExpandClass()
    call PhpExpandClass()
    call feedkeys('a', 'n')
endfunction

" Expandindo class name com <leader>exp
autocmd FileType php inoremap <Leader>exp <Esc>:call IPhpExpandClass()<CR>
autocmd FileType php noremap <Leader>exp :call PhpExpandClass()<CR>

" Arrumando use statements por tamanho com <leader>sr
autocmd FileType php inoremap <Leader>sr <Esc>:call PhpSortUse()<CR>
autocmd FileType php noremap <Leader>sr :call PhpSortUse()<CR>

" Sort automatico apos insercao
let g:php_namespace_sort_after_insert = 1

" === indent-guides https://github.com/nathanaelkane/vim-indent-guides
let g:ident_guides_start_level = 2
let g:ident_guides_guide_size = 1

" -------------------------
" Laravel Mappings
" -------------------------

" .env do projeto atual
nmap <leader>lev :e .env<cr>
nmap <leader>lesp :e app/Providers/EventServiceProvider.php<cr>
nmap <leader>lrw :e routes/web.php<cr>
nmap <leader>lra :e routes/api.php<cr>

